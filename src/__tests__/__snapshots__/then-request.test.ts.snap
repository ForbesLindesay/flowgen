// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`./Options.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {Headers} from '../http-basic/Headers';
import type {ICache} from '../http-basic/ICache';
const Response = require('../http-response-object-2');
import type {CachedResponse} from '../http-basic/CachedResponse';

interface Options {
  allowRedirectHeaders?: Array<string>,
  cache?: 'file' | 'memory' | ICache,
  followRedirects?: boolean,
  gzip?: boolean,
  headers?: Headers,
  maxRedirects?: number,
  maxRetries?: number,
  retry?:
    | boolean
    | ((
        err: ErrnoError | null,
        res: Response<stream$Readable | Buffer | string> | void,
        attemptNumber: number,
      ) => boolean),
  retryDelay?:
    | number
    | ((
        err: ErrnoError | null,
        res: Response<stream$Readable | Buffer | string> | void,
        attemptNumber: number,
      ) => number),
  socketTimeout?: number,
  timeout?: number,
  isMatch?: (
    requestHeaders: Headers,
    cachedResponse: CachedResponse,
    defaultValue: boolean,
  ) => boolean,
  isExpired?: (
    cachedResponse: CachedResponse,
    defaultValue: boolean,
  ) => boolean,
  canCache?: (res: Response<stream$Readable>, defaultValue: boolean) => boolean,
  qs?: {[key: string]: any},
  json?: any,
  body?: string | Buffer,
}

export type {Options};
"
`;

exports[`./RequestFn.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {HttpVerb} from '../http-basic/HttpVerb';
import type {Options} from './Options';
import {ResponsePromise} from './ResponsePromise';
type RequestFn = (
  method: HttpVerb,
  url: string,
  options?: Options,
) => ResponsePromise;
export type {RequestFn};
"
`;

exports[`./ResponsePromise.d.ts 1`] = `
"// @flow
// Generated using flowgen2

const Promise = require('promise');
const Response = require('../http-response-object-2');

declare class ResponsePromise {
  getBody(encoding: string): Promise<string>,
  getBody(): Promise<Buffer | string>,
}
export {ResponsePromise};

declare function toResponsePromise(
  result: Promise<Response<Buffer | string>>,
): ResponsePromise;

export default toResponsePromise;
"
`;

exports[`./browser.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {RequestFn} from './RequestFn';
declare var _default: RequestFn;
module.exports = _default;
"
`;

exports[`./handle-qs.d.ts 1`] = `
"// @flow
// Generated using flowgen2

declare function handleQs(url: string, query: {[key: string]: any}): string;
export default handleQs;
"
`;

exports[`./index.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {RequestFn} from './RequestFn';
declare var _default: RequestFn;
module.exports = _default;
"
`;
