// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`./CachedResponse.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {Headers} from './Headers';

interface CachedResponse {
  statusCode: number;
  headers: Headers;
  body: stream$Readable;
  requestHeaders: Headers;
  requestTimestamp: number;
}

export type {CachedResponse};
"
`;

exports[`./Callback.d.ts 1`] = `
"// @flow
// Generated using flowgen2

const Response = require('../http-response-object-2');

type Callback = (
  err: ErrnoError | null,
  response?: Response<stream$Readable>,
) => void;

export type {Callback};
"
`;

exports[`./FileCache.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {ICache} from './ICache';
import type {CachedResponse} from './CachedResponse';

declare class FileCache {
  constructor(location: string): void;
  getResponse(
    url: string,
    callback: (err: null | Error, response: null | CachedResponse) => void,
  ): void;
  setResponse(url: string, response: CachedResponse): void;
  invalidateResponse(
    url: string,
    callback: (err: ErrnoError | null) => void,
  ): void;
}
export default FileCache;
"
`;

exports[`./Headers.d.ts 1`] = `
"// @flow
// Generated using flowgen2

type Headers = {+[name: string]: string | Array<string>};
export type {Headers};
"
`;

exports[`./HttpVerb.d.ts 1`] = `
"// @flow
// Generated using flowgen2

type HttpVerb =
  | 'GET'
  | 'HEAD'
  | 'POST'
  | 'PUT'
  | 'DELETE'
  | 'CONNECT'
  | 'OPTIONS'
  | 'TRACE'
  | 'PATCH';

export type {HttpVerb};
"
`;

exports[`./ICache.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {CachedResponse} from './CachedResponse';

interface ICache {
  getResponse(
    url: string,
    cb: (err: Error | null, response: CachedResponse | null) => void,
  ): void;
  setResponse(url: string, response: CachedResponse | null): void;
  invalidateResponse(url: string, cb: (err: Error | null) => void): void;
}

export type {ICache};
"
`;

exports[`./MemoryCache.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {CachedResponse} from './CachedResponse';

declare class MemoryCache {
  getResponse(
    url: string,
    callback: (err: null | Error, response: null | CachedResponse) => void,
  ): void;
  setResponse(url: string, response: CachedResponse): void;
  invalidateResponse(
    url: string,
    callback: (err: ErrnoError | null) => void,
  ): void;
}
export default MemoryCache;
"
`;

exports[`./Options.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import {Agent} from 'http';
import type {Headers} from './Headers';
import type {ICache} from './ICache';
import type {CachedResponse} from './CachedResponse';

type Response<T> = any;

interface Options {
  agent?: Agent | boolean;
  allowRedirectHeaders?: Array<string>;
  cache?: 'file' | 'memory' | ICache;
  followRedirects?: boolean;
  gzip?: boolean;
  headers?: Headers;
  ignoreFailedInvalidation?: boolean;
  maxRedirects?: number;
  maxRetries?: number;
  retry?: boolean;
  retryDelay?:
    | number
    | ((
        err: ErrnoError | null,
        res: Response<stream$Readable> | void,
        attemptNumber: number,
      ) => number);
  socketTimeout?: number;
  timeout?: number;
  isMatch?: (
    requestHeaders: Headers,
    cachedResponse: CachedResponse,
    defaultValue: boolean,
  ) => boolean;
  isExpired?: (
    cachedResponse: CachedResponse,
    defaultValue: boolean,
  ) => boolean;
  canCache?: (res: Response<stream$Readable>, defaultValue: boolean) => boolean;
}

export type {Options};
"
`;

exports[`./cache-control-utils.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {CachedResponse} from './CachedResponse';
const Response = require('../http-response-object-2');

type Policy = {maxage: number | null};
export type {Policy};

declare function isCacheable<T>(res: Response<T> | CachedResponse): boolean;
export {isCacheable};

declare function cachePolicy<T>(
  res: Response<T> | CachedResponse,
): Policy | null;
export {cachePolicy};
"
`;

exports[`./cache-utils.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {Headers} from './Headers';
import type {CachedResponse} from './CachedResponse';
const Response = require('../http-response-object-2');

declare function isMatch(
  requestHeaders: Headers,
  cachedResponse: CachedResponse,
): boolean;
export {isMatch};

declare function isExpired(cachedResponse: CachedResponse): boolean;
export {isExpired};

declare function canCache<T>(res: Response<T>): boolean;
export {canCache};
"
`;

exports[`./index.d.ts 1`] = `
"// @flow
// Generated using flowgen2

import type {Callback} from './Callback';
import type {HttpVerb} from './HttpVerb';
import type {Options} from './Options';

declare function request(
  method: HttpVerb,
  url: string,
  options: Options | null | void,
  callback: Callback,
): void | stream$Writable;

declare function request(
  method: HttpVerb,
  url: string,
  callback: Callback,
): void | stream$Writable;

module.exports = request;
"
`;
